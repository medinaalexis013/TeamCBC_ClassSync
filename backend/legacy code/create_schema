create type instructiontype as enum ('FACE_TO_FACE', 'HYBRID', 'ASYNCHRONOUS', 'SYNCHRONOUS_ONLINE');

alter type instructiontype owner to postgres;

create type degreetype as enum ('ASSOCIATE', 'BACHELORS', 'MASTERS', 'DOCTORAL');

alter type degreetype owner to postgres;

create type requirementtype as enum ('REQUIRED', 'ELECTIVE', 'COGNATE', 'CAPSTONE');

alter type requirementtype owner to postgres;

create table if not exists terms
(
    term_id           bigint generated by default as identity
        primary key,
    code              text not null
        unique,
    name              text not null,
    starts_on         date not null,
    ends_on           date not null,
    add_drop_deadline date,
    finals_week_start date
);

alter table terms
    owner to postgres;

create table if not exists departments
(
    department_id bigint generated by default as identity
        primary key,
    name          text not null
        unique,
    abbreviation  text not null
        unique,
    description   text
);

alter table departments
    owner to postgres;

create table if not exists majors
(
    major_id      bigint generated by default as identity
        primary key,
    name          text    not null
        unique,
    total_units   integer not null
        constraint majors_total_units_check
            check (total_units > 0),
    department_id bigint  not null
        references departments
);

alter table majors
    owner to postgres;

create table if not exists courses
(
    course_id     bigint generated by default as identity
        primary key,
    department_id bigint       not null
        references departments,
    course_num    varchar(10)  not null,
    title         varchar(200) not null,
    description   text,
    units         integer      not null
        constraint courses_units_check
            check (units > 0),
    constraint uq_course
        unique (department_id, course_num)
);

alter table courses
    owner to postgres;

create table if not exists prerequisite
(
    desired_course      bigint not null
        references courses
            on delete restrict,
    prerequisite_course bigint not null
        references courses
            on delete restrict,
    minimum_grade       text
        constraint prerequisite_minimum_grade_check
            check (minimum_grade = ANY
                   (ARRAY ['A'::text, 'A-'::text, 'B+'::text, 'B'::text, 'B-'::text, 'C+'::text, 'C'::text, 'D'::text])),
    primary key (desired_course, prerequisite_course)
);

alter table prerequisite
    owner to postgres;

create table if not exists course_major_requirement
(
    course_id        bigint              not null
        references courses
            on delete restrict,
    major_id         bigint              not null
        references majors
            on delete restrict,
    requirement_type app.requirementtype not null,
    notes            text,
    primary key (course_id, major_id)
);

alter table course_major_requirement
    owner to postgres;

create table if not exists professors
(
    professor_id  bigint generated by default as identity
        primary key,
    department_id bigint not null
        references departments,
    first_name    text   not null,
    last_name     text   not null,
    email         text   not null
        unique,
    phone_number  varchar(20),
    avg_rating    numeric(2, 1),
    ratings_count integer
        constraint professors_ratings_count_check
            check (ratings_count >= 0)
);

alter table professors
    owner to postgres;

create table if not exists users
(
    user_id        bigint generated by default as identity
        primary key,
    first_name     text                                   not null,
    last_name      text                                   not null,
    email          text                                   not null
        unique,
    password_hash  text                                   not null,
    email_verified boolean                  default false not null,
    created_at     timestamp with time zone default now() not null,
    last_login_at  timestamp with time zone
);

alter table users
    owner to postgres;

create table if not exists user_major_declaration
(
    user_id       bigint               not null
        references users
            on delete cascade,
    major_id      bigint               not null
        references majors
            on delete restrict,
    date_declared date,
    degree_type   app.degreetype       not null,
    is_primary    boolean default true not null,
    primary key (user_id, major_id)
);

alter table user_major_declaration
    owner to postgres;

create table if not exists sections
(
    section_id        bigint generated by default as identity
        primary key,
    course_id         bigint                not null
        references courses
            on delete restrict,
    term_id           bigint                not null
        references terms
            on delete restrict,
    professor_id      bigint                not null
        references professors
            on delete restrict,
    section_num       integer               not null,
    instruction       app.instructiontype   not null,
    capacity          integer               not null
        constraint sections_capacity_check
            check (capacity >= 0),
    enrolled_count    integer default 0     not null
        constraint sections_enrolled_count_check
            check (enrolled_count >= 0),
    consent_required  boolean default false not null,
    waitlist_capacity integer,
    waitlist_count    integer,
    constraint uq_section
        unique (course_id, term_id, section_num)
);

alter table sections
    owner to postgres;

create index if not exists idx_sections_course_term
    on sections (course_id, term_id);

create table if not exists section_meetings
(
    section_meeting_id bigint generated by default as identity
        primary key,
    section_id         bigint   not null
        references sections
            on delete cascade,
    day_of_week        smallint not null
        constraint section_meetings_day_of_week_check
            check ((day_of_week >= 1) AND (day_of_week <= 7)),
    start_time         time     not null,
    end_time           time     not null,
    room               text,
    campus             text
);

alter table section_meetings
    owner to postgres;

create index if not exists idx_meetings_section_day_start
    on section_meetings (section_id, day_of_week, start_time);

create table if not exists user_section_registrations
(
    user_id       bigint                                 not null
        references users
            on delete cascade,
    section_id    bigint                                 not null
        references sections
            on delete restrict,
    registered_at timestamp with time zone default now() not null,
    grade         text
        constraint user_section_registrations_grade_check
            check (grade = ANY
                   (ARRAY ['A'::text, 'A-'::text, 'B+'::text, 'B'::text, 'B-'::text, 'C+'::text, 'C'::text, 'D'::text, 'F'::text, 'CR'::text, 'NC'::text])),
    primary key (user_id, section_id)
);

alter table user_section_registrations
    owner to postgres;

create index if not exists idx_registrations_section
    on user_section_registrations (section_id);

create table if not exists section_waitlist
(
    user_id    bigint                                 not null
        references users
            on delete cascade,
    section_id bigint                                 not null
        references sections
            on delete cascade,
    joined_at  timestamp with time zone default now() not null,
    position   integer,
    primary key (user_id, section_id)
);

alter table section_waitlist
    owner to postgres;

create table if not exists reviews
(
    review_id    bigint generated by default as identity
        primary key,
    user_id      bigint                                 not null
        references users
            on delete cascade,
    professor_id bigint                                 not null
        references professors
            on delete restrict,
    course_id    bigint                                 not null
        references courses
            on delete restrict,
    description  text,
    rating       integer                                not null
        constraint reviews_rating_check
            check ((rating >= 1) AND (rating <= 5)),
    difficulty   integer                                not null
        constraint reviews_difficulty_check
            check ((difficulty >= 1) AND (difficulty <= 5)),
    created_at   timestamp with time zone default now() not null,
    constraint uq_review_once
        unique (user_id, professor_id, course_id)
);

alter table reviews
    owner to postgres;

create index if not exists idx_reviews_prof_created
    on reviews (professor_id asc, created_at desc);

create table if not exists reminders
(
    reminder_id  bigint generated by default as identity
        primary key,
    user_id      bigint                                 not null
        references users
            on delete cascade,
    section_id   bigint
                                                        references sections
                                                            on delete set null,
    title        text                                   not null,
    description  text,
    due_at       timestamp with time zone               not null,
    created_at   timestamp with time zone default now() not null,
    completed_at timestamp with time zone
);

alter table reminders
    owner to postgres;

create index if not exists idx_reminders_user_due
    on reminders (user_id, due_at);

create table if not exists notifications
(
    notification_id bigint generated by default as identity
        primary key,
    user_id         bigint                                 not null
        references users
            on delete cascade,
    type            text                                   not null,
    payload         jsonb                                  not null,
    created_at      timestamp with time zone default now() not null,
    read_at         timestamp with time zone
);

alter table notifications
    owner to postgres;

create index if not exists idx_notifications_user_created
    on notifications (user_id asc, created_at desc);

create table if not exists activity_logs
(
    id         bigint generated by default as identity
        primary key,
    user_id    bigint
                                                      references users
                                                          on delete set null,
    action     text                                   not null,
    details    jsonb,
    result     text,
    created_at timestamp with time zone default now() not null
);

alter table activity_logs
    owner to postgres;

create index if not exists idx_logs_user_created
    on activity_logs (user_id asc, created_at desc);

create table if not exists verification_tokens
(
    token      text                                   not null
        primary key,
    user_id    bigint                                 not null
        references users
            on delete cascade,
    expires_at timestamp with time zone               not null,
    used_at    timestamp with time zone,
    created_at timestamp with time zone default now() not null
);

alter table verification_tokens
    owner to postgres;

create unique index if not exists uq_verif_user_token
    on verification_tokens (user_id, token);

create table if not exists password_reset_tokens
(
    token      text                                   not null
        primary key,
    user_id    bigint                                 not null
        references users
            on delete cascade,
    expires_at timestamp with time zone               not null,
    used_at    timestamp with time zone,
    created_at timestamp with time zone default now() not null
);

alter table password_reset_tokens
    owner to postgres;

create unique index if not exists uq_reset_user_token
    on password_reset_tokens (user_id, token);

create table if not exists sessions
(
    session_id text                                   not null
        primary key,
    user_id    bigint                                 not null
        references users
            on delete cascade,
    created_at timestamp with time zone default now() not null,
    revoked_at timestamp with time zone,
    ip         inet,
    user_agent text
);

alter table sessions
    owner to postgres;

create index if not exists idx_sessions_user_created
    on sessions (user_id asc, created_at desc);


