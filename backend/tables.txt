--this is gonna be subjective to change, do not create the tables in your dbs yet!

CREATE SCHEMA IF NOT EXISTS app;
SET search_path = app, public;

-- 1) Enums 
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'instructiontype') THEN
    CREATE TYPE instructiontype AS ENUM ('FACE_TO_FACE','HYBRID','ASYNCHRONOUS','SYNCHRONOUS_ONLINE');
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'degreetype') THEN
    CREATE TYPE degreetype AS ENUM ('ASSOCIATE','BACHELORS','MASTERS','DOCTORAL');
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'requirementtype') THEN
    CREATE TYPE requirementtype AS ENUM ('REQUIRED','ELECTIVE','COGNATE','CAPSTONE');
  END IF;
END$$;

-- 2) Core reference tables
CREATE TABLE IF NOT EXISTS terms (
  term_id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code               TEXT UNIQUE NOT NULL,      -- e.g., '2025FA'
  name               TEXT NOT NULL,             -- 'Fall 2025'
  starts_on          DATE NOT NULL,
  ends_on            DATE NOT NULL,
  add_drop_deadline  DATE,
  finals_week_start  DATE
);

CREATE TABLE IF NOT EXISTS departments (
  department_id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name           TEXT NOT NULL UNIQUE,
  abbreviation   TEXT NOT NULL UNIQUE,          -- e.g., 'CECS'
  description    TEXT
);

CREATE TABLE IF NOT EXISTS majors (
  major_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name           TEXT NOT NULL UNIQUE,
  total_units    INT  NOT NULL CHECK (total_units > 0),
  department_id  BIGINT NOT NULL REFERENCES departments(department_id)
);

CREATE TABLE IF NOT EXISTS courses (
  course_id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  department_id  BIGINT NOT NULL REFERENCES departments(department_id),
  course_num     VARCHAR(10) NOT NULL,          -- e.g., '491B'
  title          VARCHAR(200) NOT NULL,
  description    TEXT,
  units          INT NOT NULL CHECK (units > 0),
  CONSTRAINT uq_course UNIQUE (department_id, course_num)
);

-- Self-referencing prerequisites
CREATE TABLE IF NOT EXISTS prerequisite (
  desired_course       BIGINT NOT NULL REFERENCES courses(course_id) ON DELETE RESTRICT,
  prerequisite_course  BIGINT NOT NULL REFERENCES courses(course_id) ON DELETE RESTRICT,
  minimum_grade        TEXT CHECK (minimum_grade IN ('A','A-','B+','B','B-','C+','C','D')),
  PRIMARY KEY (desired_course, prerequisite_course)
);

-- Course <-> Major requirements (M:N)
CREATE TABLE IF NOT EXISTS course_major_requirement (
  course_id        BIGINT NOT NULL REFERENCES courses(course_id) ON DELETE RESTRICT,
  major_id         BIGINT NOT NULL REFERENCES majors(major_id) ON DELETE RESTRICT,
  requirement_type requirementtype NOT NULL,
  notes            TEXT,
  PRIMARY KEY (course_id, major_id)
);

-- 3) People & auth
CREATE TABLE IF NOT EXISTS professors (
  professor_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  department_id  BIGINT NOT NULL REFERENCES departments(department_id),
  first_name     TEXT NOT NULL,
  last_name      TEXT NOT NULL,
  email          TEXT NOT NULL UNIQUE,
  phone_number   VARCHAR(20),
  avg_rating     NUMERIC(2,1),                  -- optional denorm
  ratings_count  INT CHECK (ratings_count >= 0)
);

CREATE TABLE IF NOT EXISTS users (
  user_id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name     TEXT NOT NULL,
  last_name      TEXT NOT NULL,
  email          TEXT NOT NULL UNIQUE,
  password_hash  TEXT NOT NULL,
  email_verified BOOLEAN NOT NULL DEFAULT FALSE,
  created_at     TIMESTAMPTZ NOT NULL DEFAULT now(),
  last_login_at  TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS user_major_declaration (
  user_id      BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  major_id     BIGINT NOT NULL REFERENCES majors(major_id) ON DELETE RESTRICT,
  date_declared DATE,
  degree_type  degreetype NOT NULL,
  is_primary   BOOLEAN NOT NULL DEFAULT TRUE,
  PRIMARY KEY (user_id, major_id)
);

-- 4) Sections & meetings
CREATE TABLE IF NOT EXISTS sections (
  section_id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  course_id         BIGINT NOT NULL REFERENCES courses(course_id) ON DELETE RESTRICT,
  term_id           BIGINT NOT NULL REFERENCES terms(term_id) ON DELETE RESTRICT,
  professor_id      BIGINT NOT NULL REFERENCES professors(professor_id) ON DELETE RESTRICT,
  section_num       INT NOT NULL,
  instruction       instructiontype NOT NULL,
  capacity          INT NOT NULL CHECK (capacity >= 0),
  enrolled_count    INT NOT NULL DEFAULT 0 CHECK (enrolled_count >= 0),
  consent_required  BOOLEAN NOT NULL DEFAULT FALSE,
  waitlist_capacity INT,
  waitlist_count    INT,
  CONSTRAINT uq_section UNIQUE (course_id, term_id, section_num)
);
CREATE INDEX IF NOT EXISTS idx_sections_course_term ON sections(course_id, term_id);

CREATE TABLE IF NOT EXISTS section_meetings (
  section_meeting_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_id         BIGINT NOT NULL REFERENCES sections(section_id) ON DELETE CASCADE,
  day_of_week        SMALLINT NOT NULL CHECK (day_of_week BETWEEN 1 AND 7),
  start_time         TIME NOT NULL,
  end_time           TIME NOT NULL,
  room               TEXT,
  campus             TEXT
);
CREATE INDEX IF NOT EXISTS idx_meetings_section_day_start ON section_meetings(section_id, day_of_week, start_time);

-- Registrations & waitlist
CREATE TABLE IF NOT EXISTS user_section_registrations (
  user_id      BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  section_id   BIGINT NOT NULL REFERENCES sections(section_id) ON DELETE RESTRICT,
  registered_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  grade        TEXT CHECK (grade IN ('A','A-','B+','B','B-','C+','C','D','F','CR','NC')),
  PRIMARY KEY (user_id, section_id)
);
CREATE INDEX IF NOT EXISTS idx_registrations_section ON user_section_registrations(section_id);

CREATE TABLE IF NOT EXISTS section_waitlist (
  user_id     BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  section_id  BIGINT NOT NULL REFERENCES sections(section_id) ON DELETE CASCADE,
  joined_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  position    INT,
  PRIMARY KEY (user_id, section_id)
);

-- 5) Reviews
CREATE TABLE IF NOT EXISTS reviews (
  review_id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id       BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  professor_id  BIGINT NOT NULL REFERENCES professors(professor_id) ON DELETE RESTRICT,
  course_id     BIGINT NOT NULL REFERENCES courses(course_id) ON DELETE RESTRICT,
  description   TEXT,
  rating        INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
  difficulty    INT NOT NULL CHECK (difficulty BETWEEN 1 AND 5),
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT uq_review_once UNIQUE (user_id, professor_id, course_id)
);
CREATE INDEX IF NOT EXISTS idx_reviews_prof_created ON reviews(professor_id, created_at DESC);

-- 6) Product features: reminders & notifications
CREATE TABLE IF NOT EXISTS reminders (
  reminder_id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id      BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  section_id   BIGINT REFERENCES sections(section_id) ON DELETE SET NULL,
  title        TEXT NOT NULL,
  description  TEXT,
  due_at       TIMESTAMPTZ NOT NULL,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  completed_at TIMESTAMPTZ
);
CREATE INDEX IF NOT EXISTS idx_reminders_user_due ON reminders(user_id, due_at);

CREATE TABLE IF NOT EXISTS notifications (
  notification_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id         BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  type            TEXT NOT NULL,
  payload         JSONB NOT NULL,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  read_at         TIMESTAMPTZ
);
CREATE INDEX IF NOT EXISTS idx_notifications_user_created ON notifications(user_id, created_at DESC);

-- 7) Auditing & auth helpers
CREATE TABLE IF NOT EXISTS activity_logs (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id     BIGINT REFERENCES users(user_id) ON DELETE SET NULL,
  action      TEXT NOT NULL,         -- e.g., 'LOGIN', 'SEARCH', 'REGISTER'
  details     JSONB,                 -- request metadata, route, etc.
  result      TEXT,                  -- 'SUCCESS' / 'FAIL' / error code
  created_at  TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_logs_user_created ON activity_logs(user_id, created_at DESC);

-- For email verification
CREATE TABLE IF NOT EXISTS verification_tokens (
  token       TEXT PRIMARY KEY,
  user_id     BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  expires_at  TIMESTAMPTZ NOT NULL,
  used_at     TIMESTAMPTZ,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_verif_user_token ON verification_tokens(user_id, token);

-- For password reset
CREATE TABLE IF NOT EXISTS password_reset_tokens (
  token       TEXT PRIMARY KEY,
  user_id     BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  expires_at  TIMESTAMPTZ NOT NULL,
  used_at     TIMESTAMPTZ,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_reset_user_token ON password_reset_tokens(user_id, token);

-- Server-side session store (if you use cookie sessions)
CREATE TABLE IF NOT EXISTS sessions (
  session_id   TEXT PRIMARY KEY,     -- recommend UUID or random base64
  user_id      BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  revoked_at   TIMESTAMPTZ,
  ip           INET,
  user_agent   TEXT
);
CREATE INDEX IF NOT EXISTS idx_sessions_user_created ON sessions(user_id, created_at DESC); 